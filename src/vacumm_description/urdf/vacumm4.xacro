<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="kbot">

  <xacro:property name="base_width" value="0.2"/>
  <xacro:property name="base_len" value="0.16"/>
  <xacro:property name="wheel_radius" value="0.04"/>
  <xacro:property name="base_wheel_gap" value="0.01"/>

  <xacro:property name="wheel_joint_offset" value="0"/>
  <xacro:property name="wheel_joint_drop_offset" value="-0.02"/>

  <xacro:property name="caster_wheel_radius" value="${wheel_radius/2}"/>
  <xacro:property name="caster_wheel_mass" value="0.001"/>
  <xacro:property name="caster_wheel_joint_offset" value="0.07"/>
  <xacro:property name="caster_wheel_down_offset" value="0.01"/>


    <xacro:property name="M_PI" value="3.1415926535897931" /> 
    <xacro:property name="cam_px" value="0.025" />
    <xacro:property name="cam_pz" value="${base_len-0.025}" />
    <xacro:property name="kinect_cam_py" value="0"/>
    <xacro:property name="cam_or" value="0" />  
	<xacro:property name="cam_op" value="0" />
	<xacro:property name="cam_oy" value="0" />

  <!--Color Properties-->
  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

  <!--Interial macros-->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}"/> 
    </inertial>
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (d*d + h*h)}" ixy="0.0" ixz="0.0" iyy="${m / 12.0 * (w*w + h*h)}" iyz="0.0" izz="${m / 12.0 * (w*w + d*d)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="wheel_transmission" params="prefix">
        <transmission name="${prefix}_wheel_joint_trans" type="SimpleTransmission">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${prefix}_wheel_joint">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="${prefix}_wheel_joint_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>

  <xacro:macro name="gazebo_wheel" params="prefix">
    <gazebo reference="${prefix}_wheel">
        <mu1 value="1.0"/>
        <mu2 value="1.0"/>
        <kp value="600000"/>
        <kd value="3"/>
        <fdir1 value="1 0 0"/>
        <material>Gazebo/Grey</material>
        <turnGravityOff>false</turnGravityOff>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="gazebo_caster" params="prefix">
    <gazebo reference="${prefix}_caster_wheel">
        <mu1 value="0.0"/>
        <mu2 value="0.0"/>
        <kp value="600000"/>
        <kd value="3"/>
        <fdir1 value="1 0 0"/>
        <material>Gazebo/Grey</material>
        <turnGravityOff>false</turnGravityOff>
    </gazebo>
  </xacro:macro>

    <xacro:macro name="wheel_transmission" params="prefix">
        <transmission name="${prefix}_wheel_joint_trans" type="SimpleTransmission">
            <type>transmission_interface/SimpleTransmission</type>
            <joint name="${prefix}_wheel_joint">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
            </joint>
            <actuator name="${prefix}_wheel_joint_motor">
                <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
                <mechanicalReduction>1</mechanicalReduction>
            </actuator>
        </transmission>
    </xacro:macro>


    

    <xacro:gazebo_wheel prefix="left"/>
    <xacro:gazebo_wheel prefix="right"/>
    <xacro:gazebo_caster prefix="front"/>
    <xacro:gazebo_caster prefix="back"/>
    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <legacyMode>false</legacyMode>

        </plugin>
    </gazebo>


    <xacro:macro name="vacumm_sim_3dsensor">
    <gazebo reference="camera_link">  
      <sensor type="depth" name="camera">
        <always_on>true</always_on>
        <update_rate>20.0</update_rate>
        <camera>
          <horizontal_fov>${60.0*M_PI/180.0}</horizontal_fov>
          <image>
            <format>B8G8R8</format>
            <width>640</width>
            <height>480</height>
          </image>
          <clip>
            <near>0.05</near>
            <far>8.0</far>
          </clip>
        </camera>
        <plugin name="kinect_camera_controller" filename="libgazebo_ros_openni_kinect.so">
          <cameraName>camera</cameraName>
          <alwaysOn>true</alwaysOn>
          <updateRate>10</updateRate>
          <imageTopicName>rgb/image_raw</imageTopicName>
          <depthImageTopicName>depth/image_raw</depthImageTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <frameName>camera_depth_optical_frame</frameName>
          <baseline>0.1</baseline>
          <distortion_k1>0.0</distortion_k1>
          <distortion_k2>0.0</distortion_k2>
          <distortion_k3>0.0</distortion_k3>
          <distortion_t1>0.0</distortion_t1>
          <distortion_t2>0.0</distortion_t2>
          <pointCloudCutoff>0.4</pointCloudCutoff>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>
  <!--Base Footprint-->
  <link name="base_footprint">
    <xacro:box_inertia m="2" w="0.001" h="0.001" d="0.001"/>
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
  </link>

  <!--Base link-->
  <link name="base_link">
    <xacro:cylinder_inertia m="2" r="${base_width/2}" h="${base_len}"/>
    <visual>
      <geometry>
        <cylinder radius="${base_width/2}" length="${base_len}"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${base_width/2}" length="${base_len}"/>
      </geometry>
    </collision>
  </link>

  <!--base_link to base_footprint Joint-->
  <joint name="base_link_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>

  <!--Wheel link & joint macro-->
  <xacro:macro name="wheel" params="prefix reflect">
    <link name="${prefix}_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.005"/>
        </geometry>
        <material name="red"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.005"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="0.005"/>
    </link>

    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${wheel_joint_offset} ${((base_width/2)+base_wheel_gap)*reflect} -${(base_width/2)+wheel_joint_drop_offset}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <!--Create Left & Right Wheel links/joints-->
  <xacro:wheel prefix="left" reflect="1"/>
  <xacro:wheel prefix="right" reflect="-1"/>

  <!--Front Caster Wheel Link-->
  <link name="front_caster_wheel">
    
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_wheel_radius}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="0.2" r="${caster_wheel_radius}"/>
  </link>

  <!--Front Caster Wheel Joint-->
  <joint name="front_caster_wheel_joint" type="continuous">
    <axis xyz="0 1 0" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="front_caster_wheel"/>
    <origin xyz="${caster_wheel_joint_offset} 0 -${((base_width/2)-(caster_wheel_radius/2))+caster_wheel_down_offset}" rpy="0 0 0"/>
  </joint>

    <!--Back Caster Wheel Link-->
  <link name="back_caster_wheel">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_wheel_radius}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="0.2" r="${caster_wheel_radius}"/>
  </link>

  <!--Back Caster Wheel Joint-->
  <joint name="back_caster_wheel_joint" type="continuous">
    <axis xyz="0 1 0" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="back_caster_wheel"/>
    <origin xyz="-${caster_wheel_joint_offset} 0 -${((base_width/2)-(caster_wheel_radius/2))+caster_wheel_down_offset}" rpy="0 0 0"/>
  </joint>

  <xacro:wheel_transmission prefix="left" />
  <xacro:wheel_transmission prefix="right" />

  <xacro:macro name="sensor_kinect" params="parent">
    <joint name="camera_rgb_joint" type="fixed">
      <origin xyz="${cam_px} ${kinect_cam_py} ${cam_pz}" rpy="${cam_or} ${cam_op} ${cam_oy}"/>
      <parent link="${parent}"/>
      <child link="camera_rgb_frame" />
    </joint>
    <link name="camera_rgb_frame"/>

    <joint name="camera_rgb_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
      <parent link="camera_rgb_frame" />
      <child link="camera_rgb_optical_frame" />
    </joint>
    <link name="camera_rgb_optical_frame"/>

    <joint name="camera_joint" type="fixed">
      <origin xyz="-0.031 ${-kinect_cam_py} -0.016" rpy="0 0 0"/>
      <parent link="camera_rgb_frame"/>
      <child link="camera_link"/>
    </joint>  
      <link name="camera_link">
      <visual>
       <origin xyz="0 0 0" rpy="0 0 ${M_PI/2}"/>
        <geometry>
         <mesh filename="package://vacumm_description/meshes/sensors/kinect.dae"/>
        </geometry>
      </visual>
  	  <collision>
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
  	    <geometry>
  	      <box size="0.07271 0.27794 0.073"/>
  	    </geometry>
  	  </collision>
      <inertial>
        <mass value="0.564" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.003881243" ixy="0.0" ixz="0.0"
                 iyy="0.000498940" iyz="0.0"
                 izz="0.003879257" />
      </inertial>
    </link>

    <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch 
         files. However, for Gazebo simulation we need them, so we add them here.
         (Hence, don't publish them additionally!) -->
	<joint name="camera_depth_joint" type="fixed">
	  <origin xyz="0 ${2 * -kinect_cam_py} 0" rpy="0 0 0" />
	  <parent link="camera_rgb_frame" />
	  <child link="camera_depth_frame" />
	</joint>
	<link name="camera_depth_frame"/>

	<joint name="camera_depth_optical_joint" type="fixed">
	  <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}" />
	  <parent link="camera_depth_frame" />
	  <child link="camera_depth_optical_frame" />
	</joint>
	<link name="camera_depth_optical_frame"/>
	
	<!-- Kinect sensor for simulation -->
	<xacro:vacumm_sim_3dsensor/>
  </xacro:macro>
  
  <xacro:sensor_kinect parent="base_link" />
</robot>